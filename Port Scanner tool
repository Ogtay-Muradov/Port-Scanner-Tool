import socket
from concurrent.futures import ThreadPoolExecutor
import logging

# Configure logging
logging.basicConfig(filename='port_scanner.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Function to scan a single port
def scan_port(target, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1.0)  # Set a timeout for connection attempts
        result = sock.connect_ex((target, port))
        if result == 0:
            print(f"Port {port} is open on {target}.")
            logging.info(f"Port {port} is open on {target}.")
        sock.close()
    except socket.error as e:
        logging.error(f"Socket error on port {port}: {e}")
    except Exception as ex:
        logging.error(f"Unexpected error on port {port}: {ex}")

# Function to start the scan
def start_scan(target, start_port, end_port, thread_count=500):
    # Ensure thread_count does not exceed reasonable limits
    max_threads = 1000
    if thread_count > max_threads:
        print(f"Reducing number of threads to maximum allowed: {max_threads}")
        thread_count = max_threads

    print(f"\nScanning {target} from port {start_port} to {end_port} with {thread_count} threads...\n")

    # Log the scan parameters
    logging.info(f"Starting scan on {target} from port {start_port} to {end_port} with {thread_count} threads.")

    # Use ThreadPoolExecutor for efficient multithreading
    with ThreadPoolExecutor(max_workers=thread_count) as executor:
        futures = []
        for port in range(start_port, end_port + 1):
            # Log the port being scanned
            logging.info(f"Scanning port {port}...")
            future = executor.submit(scan_port, target, port)
            futures.append(future)

        # Ensure all futures complete
        for future in futures:
            future.result()

if __name__ == '__main__':
    try:
        # Ask for user input for domain or IP address and port range
        target = input("Enter the target (domain name or IP address): ")
        start_port = int(input("Enter the start port number: "))
        end_port = int(input("Enter the end port number: "))

        # Validate port range
        if start_port < 1 or end_port > 65535 or start_port > end_port:
            raise ValueError("Invalid port range. Ports must be between 1 and 65535, and start_port must be less than or equal to end_port.")

        # Ask user for number of threads (default 500)
        threads = int(input("Enter the number of threads (default 500): ") or "500")

        # Call the scan function
        start_scan(target, start_port, end_port, threads)
    except ValueError as ve:
        print(f"Input error: {ve}")
        logging.error(f"Input error: {ve}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        logging.error(f"An unexpected error occurred: {e}")
